# REMOVE THIS LINE ENTIRELY FOR PRODUCTION:
# input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

# --- Todo Model ---
type Todo @model @auth(rules: [
  { allow: owner, ownerField: "owner", identityClaim: "cognito:username", operations: [create, read, update, delete] }
]) {
  id: ID!
  name: String!
  description: String
  owner: String # This field stores the Cognito username or sub
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

# --- UserSubscription Model ---
type UserSubscription @model @auth(rules: [
  { allow: owner, ownerField: "owner", identityClaim: "cognito:username", operations: [create, read, update, delete] }
]) {
  id: ID!
  userId: String! # The ID of the user (e.g., Cognito sub)
  status: String!
  startDate: AWSDate!
  endDate: AWSDate
  planName: String!
  price: Float!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String # Stores the Cognito username or sub
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

# --- UserProfile Model ---
type UserProfile @model @auth(rules: [
  { allow: owner, ownerField: "owner", identityClaim: "cognito:username", operations: [create, read, update, delete] }
]) {
  id: ID!
  username: String!
  email: AWSEmail!
  fullName: String
  dateOfBirth: AWSDate
  phoneNumber: AWSPhone
  address: String
  membershipStatus: String
  stripeCustomerId: String
  stripeSubscriptionId: String
  owner: String # Stores the Cognito username or sub
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!

  disabilities: AWSJSON
  dependents: AWSJSON
  serviceDates: AWSJSON
  strategyData: AWSJSON
  claimPackage: AWSJSON
  appointments: AWSJSON
  todos: AWSJSON
  symptomLogs: AWSJSON
  presumptiveSymptoms: AWSJSON
  savedDocuments: AWSJSON
  sessionInfo: AWSJSON
}

# --- DisabilityApplication Model ---
type DisabilityApplication @model @auth(rules: [
  { allow: owner, ownerField: "owner", identityClaim: "cognito:username", operations: [create, read, update, delete] }
]) {
  id: ID!
  applicantID: String! # Link to the UserProfile ID or Cognito user_id
  applicationStatus: String!
  submissionDate: AWSDate
  disabilityType: String!
  description: String
  notes: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String # Stores the Cognito username or sub
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

# --- PublicFAQ Model ---
type PublicFAQ @model @auth(rules: [
  { allow: public, operations: [read] }
]) {
  id: ID!
  question: String!
  answer: String!
  category: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}